class Solution {
public:
    vector<int> count;
    vector<int>dp;

    void dfs1(int node, int parent, vector<vector<int>>& adj) {
        
        for (auto it : adj[node]) {
            if (it != parent) {
                dfs1(it, node, adj);
                
            }
        }
        for (auto it : adj[node]) {
            if (it != parent) {
                count[node] += count[it];
                dp[node] += dp[it] + count[it];
            }
        }
    }

    void dfs2(int node, int parent, vector<vector<int>>& adj, vector<int>& dp, int n) {
        for (auto it : adj[node]) {
            if (it != parent) {
                dp[it] = dp[node] - count[it] + (n - count[it]);
                dfs2(it, node, adj, dp, n);
            }
        }
    }

    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        count.resize(n, 1);
        dp.resize(n, 0);
        
      
        for (int i = 0; i < edges.size(); i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        
     
        dfs1(0, -1, adj);
        
       
        dfs2(0, -1, adj, dp, n);
        
        return dp;
    }
};
